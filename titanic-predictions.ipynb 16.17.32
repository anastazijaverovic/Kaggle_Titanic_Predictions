{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.10","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Importing the libraries\n\n# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\nimport math\nimport matplotlib.pyplot as plt\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"/kaggle/input/titanic/train.csv\n/kaggle/input/titanic/test.csv\n/kaggle/input/titanic/gender_submission.csv\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Importing the data**","metadata":{}},{"cell_type":"code","source":"training_set = pd.read_csv('/kaggle/input/titanic/train.csv')\ntest_set = pd.read_csv('/kaggle/input/titanic/test.csv')","metadata":{"trusted":true},"execution_count":7,"outputs":[]},{"cell_type":"markdown","source":"**Data exploration**","metadata":{}},{"cell_type":"code","source":"training_set.head()","metadata":{"trusted":true},"execution_count":8,"outputs":[{"execution_count":8,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Survived  Pclass  \\\n0            1         0       3   \n1            2         1       1   \n2            3         1       3   \n3            4         1       1   \n4            5         0       3   \n\n                                                Name     Sex   Age  SibSp  \\\n0                            Braund, Mr. Owen Harris    male  22.0      1   \n1  Cumings, Mrs. John Bradley (Florence Briggs Th...  female  38.0      1   \n2                             Heikkinen, Miss. Laina  female  26.0      0   \n3       Futrelle, Mrs. Jacques Heath (Lily May Peel)  female  35.0      1   \n4                           Allen, Mr. William Henry    male  35.0      0   \n\n   Parch            Ticket     Fare Cabin Embarked  \n0      0         A/5 21171   7.2500   NaN        S  \n1      0          PC 17599  71.2833   C85        C  \n2      0  STON/O2. 3101282   7.9250   NaN        S  \n3      0            113803  53.1000  C123        S  \n4      0            373450   8.0500   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Survived</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>1</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Braund, Mr. Owen Harris</td>\n      <td>male</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>A/5 21171</td>\n      <td>7.2500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>2</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n      <td>female</td>\n      <td>38.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>PC 17599</td>\n      <td>71.2833</td>\n      <td>C85</td>\n      <td>C</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3</td>\n      <td>1</td>\n      <td>3</td>\n      <td>Heikkinen, Miss. Laina</td>\n      <td>female</td>\n      <td>26.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>STON/O2. 3101282</td>\n      <td>7.9250</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>4</td>\n      <td>1</td>\n      <td>1</td>\n      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n      <td>female</td>\n      <td>35.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>113803</td>\n      <td>53.1000</td>\n      <td>C123</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>5</td>\n      <td>0</td>\n      <td>3</td>\n      <td>Allen, Mr. William Henry</td>\n      <td>male</td>\n      <td>35.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>373450</td>\n      <td>8.0500</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"test_set.head()","metadata":{"trusted":true},"execution_count":9,"outputs":[{"execution_count":9,"output_type":"execute_result","data":{"text/plain":"   PassengerId  Pclass                                          Name     Sex  \\\n0          892       3                              Kelly, Mr. James    male   \n1          893       3              Wilkes, Mrs. James (Ellen Needs)  female   \n2          894       2                     Myles, Mr. Thomas Francis    male   \n3          895       3                              Wirz, Mr. Albert    male   \n4          896       3  Hirvonen, Mrs. Alexander (Helga E Lindqvist)  female   \n\n    Age  SibSp  Parch   Ticket     Fare Cabin Embarked  \n0  34.5      0      0   330911   7.8292   NaN        Q  \n1  47.0      1      0   363272   7.0000   NaN        S  \n2  62.0      0      0   240276   9.6875   NaN        Q  \n3  27.0      0      0   315154   8.6625   NaN        S  \n4  22.0      1      1  3101298  12.2875   NaN        S  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>PassengerId</th>\n      <th>Pclass</th>\n      <th>Name</th>\n      <th>Sex</th>\n      <th>Age</th>\n      <th>SibSp</th>\n      <th>Parch</th>\n      <th>Ticket</th>\n      <th>Fare</th>\n      <th>Cabin</th>\n      <th>Embarked</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>892</td>\n      <td>3</td>\n      <td>Kelly, Mr. James</td>\n      <td>male</td>\n      <td>34.5</td>\n      <td>0</td>\n      <td>0</td>\n      <td>330911</td>\n      <td>7.8292</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>893</td>\n      <td>3</td>\n      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n      <td>female</td>\n      <td>47.0</td>\n      <td>1</td>\n      <td>0</td>\n      <td>363272</td>\n      <td>7.0000</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>894</td>\n      <td>2</td>\n      <td>Myles, Mr. Thomas Francis</td>\n      <td>male</td>\n      <td>62.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>240276</td>\n      <td>9.6875</td>\n      <td>NaN</td>\n      <td>Q</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>895</td>\n      <td>3</td>\n      <td>Wirz, Mr. Albert</td>\n      <td>male</td>\n      <td>27.0</td>\n      <td>0</td>\n      <td>0</td>\n      <td>315154</td>\n      <td>8.6625</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>896</td>\n      <td>3</td>\n      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n      <td>female</td>\n      <td>22.0</td>\n      <td>1</td>\n      <td>1</td>\n      <td>3101298</td>\n      <td>12.2875</td>\n      <td>NaN</td>\n      <td>S</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"markdown","source":"1. Survival rate PClass","metadata":{}},{"cell_type":"code","source":"classes = training_set.Pclass.unique()\n# .loc - get rows by the name of a column\n\nfor i in classes:\n    survival_rate_classes\nclass_1 = training_set.loc[training_set.Pclass == 1][\"Survived\"]\nclass_2 = training_set.loc[training_set.Pclass == 2][\"Survived\"]\nclass_3 = training_set.loc[training_set.Pclass == 3][\"Survived\"]\n\nrate_survived_class_1 = sum(class_1)/len(class_1)\nrate_survived_class_2 = sum(class_2)/len(class_2)\nrate_survived_class_3 = sum(class_3)/len(class_3)\nprint('Survival rate class 1: ')\nprint(round(rate_survived_class_1,2))\nprint('Survival rate class 2: ')\nprint(round(rate_survived_class_2,2))\nprint('Survival rate class 3: ')\nprint(round(rate_survived_class_3,2))\n\n\nplt.bar()","metadata":{"trusted":true},"execution_count":10,"outputs":[{"name":"stdout","text":"Survival rate class 1: \n0.63\nSurvival rate class 2: \n0.47\nSurvival rate class 3: \n0.24\n","output_type":"stream"}]},{"cell_type":"markdown","source":"2. Survival rate per Sex","metadata":{}},{"cell_type":"code","source":"men = training_set.loc[training_set.Sex == 'male'][\"Survived\"]\nwomen = training_set.loc[training_set.Sex == 'female'][\"Survived\"]\n\nsurvival_rate_men = sum(men)/len(men)\nsurvival_rate_women = sum(women)/len(women)\nprint('Survival rate men: ')\nprint(round(survival_rate_men,2))\nprint('Survival rate women: ')\nprint(round(survival_rate_women,2))","metadata":{"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Survival rate men: \n0.19\nSurvival rate women: \n0.74\n","output_type":"stream"}]},{"cell_type":"markdown","source":"3. Survival rate per Age bucket","metadata":{}},{"cell_type":"code","source":"max_age = max(training_set.Age)\ntraining_set[\"AgeGroup\"] = pd.cut(round(training_set.Age), bins = 5, labels=[\"1\", \"2\", \"3\", \"4\", \"5\"], ordered = True)\nprint('Age categories: ')\nprint(training_set.AgeGroup.unique())\n\nsurvival_rate = []\n\nfor i in range(1,5):\n    cat = training_set.loc[training_set.AgeGroup == str(i)][\"Survived\"]\n    survival_rate.append(round(sum(cat)/len(cat),2))\n    print(i)\n    print(survival_rate)","metadata":{"trusted":true},"execution_count":12,"outputs":[{"name":"stdout","text":"Age categories: \n['2', '3', NaN, '4', '1', '5']\nCategories (5, object): ['1' < '2' < '3' < '4' < '5']\n1\n[0.55]\n2\n[0.55, 0.37]\n3\n[0.55, 0.37, 0.4]\n4\n[0.55, 0.37, 0.4, 0.43]\n","output_type":"stream"}]},{"cell_type":"markdown","source":"4. Survival rate by # of siblings / spouses aboard the Titanic","metadata":{}},{"cell_type":"code","source":"sibsp_categories = []\nsibsp_categories = training_set.SibSp.unique()\nsibsp_categories.sort()\n\nsurvival_rate_sibsp = []\n\nfor i in sibsp_categories:\n    cat = training_set.loc[training_set.SibSp == i][\"Survived\"]\n    survival_rate_sibsp.append(round(sum(cat)/len(cat),2))\n    print(i)\n    print(survival_rate_sibsp)\n\nplt.bar(sibsp_categories, survival_rate_sibsp)\nplt.title(\"Survival Rate - Number of Siblings/Spouses aboard\")\nplt.xlabel(\"Number of Siblings/Spouses\")\nplt.ylabel(\"Survival Rate\")","metadata":{"trusted":true},"execution_count":50,"outputs":[{"name":"stdout","text":"0\n[0.35]\n1\n[0.35, 0.54]\n2\n[0.35, 0.54, 0.46]\n3\n[0.35, 0.54, 0.46, 0.25]\n4\n[0.35, 0.54, 0.46, 0.25, 0.17]\n5\n[0.35, 0.54, 0.46, 0.25, 0.17, 0.0]\n8\n[0.35, 0.54, 0.46, 0.25, 0.17, 0.0, 0.0]\n","output_type":"stream"},{"execution_count":50,"output_type":"execute_result","data":{"text/plain":"Text(0, 0.5, 'Survival Rate')"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"<Figure size 432x288 with 1 Axes>","image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}